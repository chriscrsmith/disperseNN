// missing constants-e.g. sigma, K, W, G- should be defined on command line

initialize() {

    setSeed(SEED);
    print( c("new seed:",getSeed()) );
    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    initializeTreeSeq(); 

    print(sigma);

    defineConstant("SD", sigma);  // sigma_D, the dispersal distance
    defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
    defineConstant("SM", SI);  // sigma_M, the mate choice distance
    defineConstant("L", 4);    // mean lifetime at stationarity
    defineConstant("FECUN", 1/L); // mean fecundity
    defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function

    initializeMutationType("m1", 0.5, "g", 0.0, 2);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, G-1);
    initializeMutationRate(mu);
    initializeRecombinationRate(r);  
    
    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
    i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
    
    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
    i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

reproduction() {
    mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
        nOff = rpois(1, FECUN);
        for (i in seqLen(nOff)) {
            pos = individual.spatialPosition + rnorm(2, 0, SD);
            if (p1.pointInBounds(pos)) {
               offspring = subpop.addCrossed(individual, mate);
               offspring.setSpatialPosition(pos);
            }
        }
    }
    return;
}

1 early() {
    sim.addSubpop("p1", asInteger(K * W * W));
    p1.setSpatialBounds(c(0, 0, W, W));
    for (ind in p1.individuals) {
        ind.setSpatialPosition(p1.pointUniform());
    }
    i1.evaluate();
}

early() {
    i1.evaluate(p1);
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
    inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));    
    // scale fitness at edges
    inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
   // to be ready for mate choice
   i2.evaluate(p1);
}

1: late() {
        print(c("Finished generation", sim.generation, "; N=", p1.individualCount));
        if (p1.individualCount < (0.75*K*W*W)){
           catn("Population declined more than 25% in first 100 gens.");
           sim.simulationFinished();
        }
        else{
		// // output intermittent tree sequences
		// if (sim.generation == 100){
		//     sim.treeSeqOutput(paste(c(OUTNAME,"_100gens_",SEED,".trees"), sep=""));
		//     }
		// else if (sim.generation == 1000){
		//     sim.treeSeqOutput(paste(c(OUTNAME,"_1000gens_",SEED,".trees"), sep=""));
		//     }
                // else if (sim.generation == 10000){
		//     sim.treeSeqOutput(paste(c(OUTNAME,"_10000gens_",SEED,".trees"), sep=""));
		//     }
		// else if (sim.generation == 100000){
		//     sim.treeSeqOutput(paste(c(OUTNAME,"_100000gens_",SEED,".trees"), sep=""));
		//     catn("Done.");	    
		//     sim.simulationFinished();
		//     }
		
		// end after maxgens
		if (sim.generation == maxgens){
                   sim.treeSeqOutput(paste(c(OUTNAME,"_",SEED,".trees"), sep=""));
                   catn("Done.");
                   sim.simulationFinished();
                }
	    }
        }


999999999 late() {} // jerry-rig. I haven't taken the time to figure out how to avoid this.


